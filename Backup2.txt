package org.example.servers.controller;

import com.example.KeyValueObject;
import com.example.ServerObject;
import org.example.servers.service.ServerSimulator;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.LinkedBlockingQueue;

@RestController
@RequestMapping("/api")
public class ServerController {
    private final ServerSimulator serverSimulator;
    private final ConcurrentHashMap<String, BlockingQueue<KeyValueObject>> threadsMap = new ConcurrentHashMap<>();
    private final BlockingQueue<String> blockingQueueIndicator;
    private boolean server1FistTime = true;
    private boolean server2FistTime = true;

    public ServerController(ServerSimulator serverSimulator) {
        this.serverSimulator = serverSimulator;
        blockingQueueIndicator = new LinkedBlockingQueue<>(
                serverSimulator.getServers().size()
        );

        for(ServerObject server : serverSimulator.getServers().values()){
            String serverId = server.getServerId();

            threadsMap.put(
                    serverId,
                    new LinkedBlockingQueue<>(1)
            );

            new Thread(() -> {
                while(true) {
                    try {
                        blockingQueueIndicator.add(serverId);
                        server.getQueueServer().put(
                                threadsMap.get(serverId).take()
                        );
                        blockingQueueIndicator.remove(serverId);

                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                }


            }).start();
        }
    }

    @PostMapping("/server")
    public ResponseEntity<String> handleServer1(@RequestParam String serverId, @RequestBody KeyValueObject keyValueObject) throws InterruptedException {
        blockingQueueIndicator.put("Block");
        threadsMap.get(serverId).add(keyValueObject);
        blockingQueueIndicator.remove("Block");

        if(serverId.equals("1")){
            if(server1FistTime){
                server1FistTime = false;
                
                
            }

        }
        if(serverId.equals("2")){
            if(server2FistTime){
                server2FistTime = false;
            }

        }

        return new ResponseEntity<>(HttpStatus.OK);
    }

    @PostMapping("/server2")
    public ResponseEntity<String> handleServer2(@RequestBody KeyValueObject keyValueObject) {
        try {
            serverSimulator.getServers().get("1").getQueueServer().put(keyValueObject);

            return ResponseEntity.status(HttpStatus.OK).body("Data processed by Server 2");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error processing data at Server 2: " + e.getMessage());
        }
    }

    @GetMapping("/servers")
    public Map<String, ServerObject> getServers() {
        return serverSimulator.getServers();
    }
}

//package org.example.servers.controller;
//
//import com.example.KeyValueObject;
//import com.example.ServerObject;
//import org.example.servers.service.ServerSimulator;
//import org.springframework.http.HttpStatus;
//import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.*;
//
//import java.net.ServerSocket;
//import java.util.Map;
//import java.util.concurrent.BlockingQueue;
//import java.util.concurrent.LinkedBlockingQueue;
//
//@RestController
//@RequestMapping("/api")
//public class ServerController {
//    private final ServerSimulator serverSimulator;
//    private BlockingQueue<KeyValueObject> server1Queue;
//    private BlockingQueue<KeyValueObject> server2Queue;
//    private boolean server1Fetched = false;
//    private boolean server2Fetched = false;
//
//    public ServerController(ServerSimulator serverSimulator) {
//        this.serverSimulator = serverSimulator;
//
//    }
//
//    @PostMapping("/server1")
//    public ResponseEntity<String> handleServer1(@RequestBody KeyValueObject keyValueObject) {
//        if(!server1Fetched && serverSimulator.getServers().containsKey("1")){
//            server1Queue = serverSimulator.getServers().get("1").getQueueServer();
//            server1Fetched = true;
//        }
//
//        try {
//            server1Queue.put(keyValueObject);
////            serverSimulator.getQueueServer1().put(keyValueObject);
//
//            return ResponseEntity.status(HttpStatus.OK).body("Data processed by Server 1");
//        } catch (Exception e) {
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                    .body("Error processing data at Server 1: " + e.getMessage());
//        }
//    }
//
//    @PostMapping("/server2")
//    public ResponseEntity<String> handleServer2(@RequestBody KeyValueObject keyValueObject) {
//        if(!server2Fetched && serverSimulator.getServers().containsKey("2")){
//            server2Queue = serverSimulator.getServers().get("2").getQueueServer();
//
//            server2Fetched = true;
//        }
//
//        try {
//            server2Queue.put(keyValueObject);
////            serverSimulator.getQueueServer2().put(keyValueObject);
//
//            return ResponseEntity.status(HttpStatus.OK).body("Data processed by Server 2");
//        } catch (Exception e) {
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                    .body("Error processing data at Server 2: " + e.getMessage());
//        }
//    }
//
////        @GetMapping("/servers")
////    public Map<Integer, ServerObject> getServers() {
////        return serverSimulator.getServers();
////    }
//}
//
